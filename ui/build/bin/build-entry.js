// 该文件主要为了编译出一个src/index.js入口文件

const fs = require('fs');
const path = require('path');
const render = require('json-templater/string');
const uppercamelcase = require('uppercamelcase');
const endOfLine = require('os').EOL;

// 获取组件列表json
const Components = require('../../components.json');

// 输出src目录下的入口文件index.js
const OUTPUT_PATH = path.join(__dirname, '../../src/index.js');
// 定义加载packge语句
const IMPORT_TEMPLATE = "import {{name}} from '../packages/{{package}}/index.js'";
// 定义安装组件模板语句
const INSTALL_COMPONENT_TEMPLATE = '  {{name}}'
// 定义输出模板
const MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */
{{include}}
import locale from 'sinux-ui/src/locale';
import CollapseTransition from 'sinux-ui/src/transitions/collapse-transition';

const components = [
{{install}},
   CollapseTransition
];

const install = function(app, opts = {}) {
  // locale.use(opts.locale);
  // locale.i18n(opts.i18n);

  components.forEach(component => {
    app.component(component.name, component);
  });

  app.use(InfiniteScroll);
  app.use(Loading.directive);

  app.config.globalProperties.$ELEMENT = {
    size: opts.size || '',
    zIndex: opts.zIndex || 2000
  };

  app.config.globalProperties.$loading = Loading.service;
  app.config.globalProperties.$msgbox = MessageBox;
  app.config.globalProperties.$alert = MessageBox.alert;
  app.config.globalProperties.$confirm = MessageBox.confirm;
  app.config.globalProperties.$prompt = MessageBox.prompt;

   app.config.globalProperties.$notify = Notification;
   app.config.globalProperties.$message = Message;

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  locale: locale.use,
  i18n: locale.i18n,
  install,
  CollapseTransition,
{{list}}
};
`
delete Components.font

const ComponentName = Object.keys(Components);

const includeComponentTemplate = [];
const installTemplate = [];
const listTemplate = [];

ComponentName.forEach((name) => {
  if(['input'].indexOf(name) > -1) {
    // 白名单替换
     const componentName = uppercamelcase(name);
    //  将组件列表中的模块添加到inclueCom中
     includeComponentTemplate.push(
      //  解析出用于导入组件的import语句,如：import INPUT from '../../packages/input/index.js
       render(IMPORT_TEMPLATE, {
         name: componentName,
         package: name
       })
     )

     // installCom
     if (
      [
        'Loading',
        'MessageBox',
        'Notification',
        'Message',
        'InfiniteScroll'
      ].indexOf(componentName) === -1
    ) {
      installTemplate.push(
        render(INSTALL_COMPONENT_TEMPLATE, {
          name: componentName,
          component: name
        })
      )
    }

    // list template
    listTemplate.push(`  ${componentName}`)
  }
})

const template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join(',' + endOfLine),
  version: process.env.VERSION || require('../../package.json').version,
  list: listTemplate.join(',' + endOfLine)
})

// 写入src入口模板文件
fs.writeFileSync(OUTPUT_PATH, template)
